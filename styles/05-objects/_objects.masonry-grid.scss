@use '../01-settings/settings.config' as config;
@use '../01-settings/settings.masonry-grid' as masonry;
@use '../01-settings/settings.breakpoints' as breakpoints;
@use '../02-tools/tools.rem' as *;
@use 'sass:math';

.o-masonry-grid {
  $root: &;

  // Base styles
  position: relative;
  width: 100%;
  min-height: 100px; // Minimum height to prevent layout shift

  // Animation variant
  &--animate {
    .o-masonry-grid__item {
      transition:
        opacity 0.3s ease,
        top 0.3s ease,
        left 0.3s ease;
    }
  }

  // Item styles
  &__item {
    box-sizing: border-box;
    width: 100%;

    // Prevent FOUC (Flash of Unstyled Content)
    &:not([style*='position: absolute']) {
      opacity: 0;
      visibility: hidden;
    }
  }

  // Loading states for items
  &__item-loading {
    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: var(--#{config.$prefix}gray-10);
      z-index: 1;
      border-radius: 4px;
    }

    img {
      opacity: 0;
    }
  }

  // Loaded state with fade-in animation
  &__item-loaded img {
    animation: masonry-item-fade-in 0.3s ease forwards;
  }

  // Progressive loading indicator
  &--loading-images {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      bottom: 16px;
      right: 16px;
      width: 24px;
      height: 24px;
      border: 2px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top-color: var(--#{config.$prefix}brand-border-subtle);
      animation: masonry-spinner 0.8s linear infinite;
      z-index: 1000;
      pointer-events: none;
    }
  }

  // Animations
  @keyframes masonry-spinner {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes masonry-item-fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}
